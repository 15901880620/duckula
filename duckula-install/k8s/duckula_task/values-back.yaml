image: rjzjh/duckula
imageTaskTag: task.2.0.0
imagePullPolicy: IfNotPresent
#运行的命令 docker-run.sh:监听mysql  docker-consumer.sh：kafka监听  docker-dump.sh: 全量导入
cmd:  docker-run.sh
#zk与taskid都是必填的
env:
  zk: 47.99.35.252:2181,47.99.45.41:2181,116.62.124.249:2181
  taskid: binlog_test_db-user_info
  #taskpattern: tiller
  
## set to `now` to get a one time job, or a cronjob schedule like `0 0 * * *`
## set to `nojob`  不是job
#schedule: "0/5 * * * *"
schedule: nojob

## 在schedule不是now和nojob时有效
successfulJobsHistoryLimit: 2
failedJobsHistoryLimit: 2

hosts:
- {ip: 120.27.209.9,host: [kafka-dev] }
- {ip: 120.27.209.11,host: [kafka-test]}
 
service:
  type: ClusterIP
  jmxexport:
    port: 8080
    # nodePort: 32000
  debugport:
    port: 2780
    # nodePort: 32001
#持久化
persistence:
  enabled: false
  #设置ops的持久化卷，必须设置，如果enabled为fals将是全新安装不能与ops建立连接
  existingClaim: duckula
  annotations: {}  
  
userconfig:
  root:
    zk.properties: |-
      common.others.zookeeper.constr=null
      common.others.zookeeper.sleepTimeMs=1000
      common.others.zookeeper.maxRetries=5
      common.others.zookeeper.sessionTimeoutMs=9000
      common.others.zookeeper.connectionTimeoutMs=60000
  es:
    es-dev.properties: |-
      common.es.host.name=101.37.152.91
      common.es.cluster.name=es-test
      common.es.host.port.rest=9200
      common.es.host.port.transport=9300
      common.es.host.scheme=http
      common.es.client.transport.ping_timeout=5s
      common.es.client.transport.nodes_sampler_interval=5s
      common.es.http.head=header=value&
      common.es.http.maxRetryTimeoutMillis=30000
      common.es.http.connectTimeout=1000
      common.es.http.socketTimeout=30000
      common.es.http.connectionRequestTimeout=500
      common.es.query.timeout=5000
      common.es.query.index=none
      common.es.query.type=_doc
      common.es.http.aync.maxConnTotal=100
      common.es.http.aync.maxConnPerRoute=100
  kafka:
    kafka-dev.properties: |-
      common.others.kafka.common.bootstrap.servers=kafka-dev:9092
      common.others.kafka.producer.acks=1
      common.others.kafka.producer.retries=2147483647
      common.others.kafka.producer.max.block.ms=9223372036854775807L
      common.others.kafka.producer.max.in.flight.requests.per.connection=1
      common.others.kafka.producer.linger.ms=10
      common.others.kafka.producer.batch.size=102400
      common.others.kafka.producer.buffer.memory=33554432
      common.others.kafka.producer.compression.type=none
      common.others.kafka.producer.max.request.size=1048576
      common.others.kafka.producer.receive.buffer.bytes=32768
      common.others.kafka.producer.request.timeout.ms=30000
      common.others.kafka.producer.send.buffer.bytes=131072
      common.others.kafka.producer.connections.max.idle.ms=540000
      common.others.kafka.consumer.group.id=tams-group
      common.others.kafka.consumer.enable.auto.commit=true
      common.others.kafka.consumer.auto.commit.interval.ms=1000
      common.others.kafka.consumer.session.timeout.ms=30000
      common.others.kafka.consumer.auto.offset.reset=earliest 
  redis:
    redis-dev.properties: |-
      common.redis.redisserver.timeout=2000  
      common.redis.redisserver.maxWaitMillis=10000
      common.redis.redisserver.maxTotal=200
      common.redis.redisserver.maxIdle=20
      common.redis.redisserver.testOnBorrow=true
      common.redis.redisserver.testWhileIdle=true
      common.redis.redisserver.defaultDb=0
      common.redis.redisserver.password=null
      common.redis.redisserver.minIdle=0
      common.redis.redisserver.minEvictableIdleTimeMillis=13000
      common.redis.redisserver.softMinEvictableIdleTimeMillis=13000
      common.redis.redisserver.numTestsPerEvictionRun=3
      common.redis.redisserver.testOnReturn=false
      common.redis.redisserver.timeBetweenEvictionRunsMillis=60000
      common.redis.redisserver.blockWhenExhausted=true
      common.redis.redisserver.leak.enable=false
      common.redis.redisserver.clientName=tams
      common.redis.cachecloud.client_version = 1.2.0
      common.redis.cachecloud.domain_url = http://118.31.67.136:9218
      common.redis.cachecloud.redis_cluster_suffix = /cache/client/redis/cluster/%s.json?clientVersion=
      common.redis.cachecloud.redis_sentinel_suffix = /cache/client/redis/sentinel/%s.json?clientVersion=
      common.redis.cachecloud.redis_standalone_suffix = /cache/client/redis/standalone/%s.json?clientVersion=
      common.redis.cachecloud.cachecloud_report_url = /cachecloud/client/reportData.json
    
   

podAnnotations: {}

livenessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 3